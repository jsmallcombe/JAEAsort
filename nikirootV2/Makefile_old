CC = gcc
CFLAGS = -fPIC -Wall `root-config --cflags` -I./include
INCLUDE = include
SOURCEDIR = src
TARG = nikiwrapped
WRAP = $(SOURCEDIR)/wrapper.cpp
LIBRS =-L$(INCLUDE) -lnikiroot `root-config --glibs` 
_OBJ = core_nikiroot.o nikirootinc.o buffertemplate.o
OBJ = $(patsubst %,$(SOURCEDIR)/%,$(_OBJ))

# dont actually need to make libraries just wanted to test that I could
$(TARG): $(OBJ) $(WRAP)
	ar rcs $(INCLUDE)/libnikiroot.a $(OBJ)
	$(CC) -o $@ $(CFLAGS) $(WRAP) -Bstatic $(LIBRS)   -lstdc++

nikiwrappeddynamic: $(OBJ)
	$(CC) $(CFLAGS) -shared -Wl,-soname,libnikiroot.so.1 -o $(INCLUDE)/libnikiroot.so.1.0.1 $(OBJ)
	$(CC) -o $@ $(CFLAGS) $(WRAP) $(LIBRS) -lstdc++

$(SOURCEDIR)/%.o: $(SOURCEDIR)/%.cxx $(INCLUDE)/%.h
	$(CC) $(CFLAGS) -o $@ -c $< $(LIBRS)

#$(CC) -o nikiwrappedstatic -Wall -static wrapper.cpp -L. -lnikiroot `root-config --cflags` `root-config --glibs`  -L~root/lib/ -lRoot

clean:
	rm $(SOURCEDIR)/*.o
	
	
# CC=g++
# CFLAGS=-c -g -Wall `root-config --cflags`
# LDFLAGS=`root-config --glibs`
# SOURCES=main.cc XrayCrossSectionInterperlater.cc
# OBJECTS=$(SOURCES:.cc=.o)
# EXECUTABLE=main
# 
# all: $(SOURCES) $(EXECUTABLE)
# 
# $(EXECUTABLE): $(OBJECTS)
#    $(CC) $(LDFLAGS) $(OBJECTS) -o $@
# 
# .cc.o:
#    $(CC) $(CFLAGS) $< -o $@
# 
# clean:
#    rm ./*~ ./*.o ./main

